"basic settings"
set nocompatible
syntax enable
syntax on

:set number

let mapleader = " " 
let g:mapleader = " " 

"set bundles"
" use THIEF_HOME_PATH to config your vimrc.bundle path.
let bundle_path= $THIEF_HOME_PATH . "/vim/vimrc.bundles"
if filereadable(bundle_path)
    source $THIEF_HOME_PATH/vim/vimrc.bundles
endif

" install missing plugins on startup by Plug
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

" 使用jk来替换Esc键
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
set cpo-=<
imap jk <Esc>
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

" quick scope 行内快速跳转
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
"highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
"highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

" easy motion 当前屏幕内快速跳转
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
" backspace : delete line break
set backspace=2
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

" set indent
filetype indent on
set tabstop=4
set shiftwidth=4
set softtabstop=4

" set background
"set t_Co=256
set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized

" 快速open file
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" file explorer
" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
" open a NERDTree automatically when vim starts up on opening a directory
 autocmd StdinReadPre * let s:std_in=1
 autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" open a NERDTree automatically when vim starts up on no file
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" some shortcut
map <C-n> :NERDTreeToggle<CR>

" close vim if only window which is NERDTree left open.
 autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" nerdtree win default size
let NERDTreeWinSize=15
let NERDTreeShowHidden=1

" config nerdtree edge color
highlight VertSplit ctermbg=NONE
highlight VertSplit ctermfg=NONE

" ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

" indent guide
"let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
"let g:indent_guides_start_level=2
" 色块宽度
"let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
"nmap <silent> <Leader>i <Plug>IndentGuidesToggle
" set indent line
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=4

" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC
set wildmenu						" 命令行补全以增强模式运行
set wildignore=*.swp,*.bak,*.pyc,*.class,.svn
set wildmode=longest,list           " 文件名补全类似tab补全

" 自动索引,自动增量更新
" vim-gutentags {{{
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
"set tags+=/Users/Shared/Epic\ Games/UE_4.23/Engine/tags
"let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
"set tags=./.tags;,.tags
"set tags=tags;,/Users/Shared/Epic_Games/UE_4.23/Engine/tags

"" 同时开启 ctags, gtags
"let g:gutentags_modules = []
"if executable('ctags')
"	let g:gutentags_modules += ['ctags']
"endif
"if executable('gtags-cscope') && executable('gtags')
"	let g:gutentags_modules += ['gtags_cscope']
"endif
"
"" 所生成的数据文件的名称
"let g:gutentags_ctags_tagfile = '.tags'
"
"" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
"let s:vim_tags = expand('~/.cache/tags')
"let g:gutentags_cache_dir = s:vim_tags
"
"" 配置 ctags 的参数
"let g:gutentags_ctags_extra_args = ['--fields=+lniazS', '--extra=+q+f -R']
"let g:gutentags_ctags_extra_args += ['--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v']
"let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
"
"" 如果使用 universal ctags 需要增加下面一行
"let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
"" " 禁用 gutentags 自动加载 gtags 数据库的行为
"let g:gutentags_auto_add_gtags_cscope = 0
"
"" 检测 ~/.cache/tags 不存在就新建
"if !isdirectory(s:vim_tags)
"   silent! call mkdir(s:vim_tags, 'p')
"endif
" }}}

" Register ccls C++ lanuage server.
if executable('ccls')
   au User lsp_setup call lsp#register_server({
      \ 'name': 'ccls',
      \ 'cmd': {server_info->['ccls']},
      \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
      \ 'initialization_options': {'cache': {'directory': '/tmp/ccls/cache' }, "clang": {"resourceDir": "/usr/local/clang/8.0.0"}},
      \ 'whitelist': ['c', 'cpp', 'cc'],
      \ })
endif

"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vim-lsp.log')
let g:lsp_diagnostics_enabled = 0
let g:lsp_highlights_enabled = 0
let g:lsp_textprop_enabled = 0
" for asyncomplete.vim log
"let g:asyncomplete_log_file = expand('~/asyncomplete.log')

" leaderF
"let g:Lf_ShortcutF = '<c-p>'
"let g:Lf_DefaultMode = 'NameOnly'
"noremap <Leader>fm :LeaderfFunction<cr>
"noremap <Leader>fb :LeaderfBuffer<cr>
"noremap <Leader>ft :LeaderfTag<cr>
"noremap <Leader>fr :LeaderfMru<cr>
"noremap <Leader>fl :LeaderfLine<cr>
"noremap <Leader>ff :LeaderfFile<cr>
 
"let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
"let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
"let g:Lf_WorkingDirectoryMode = 'Ac'
"let g:Lf_WindowHeight = 0.30
"let g:Lf_CacheDirectory = expand('~/.vim/cache')
"let g:Lf_ShowRelativePath = 0
"let g:Lf_HideHelp = 1
"let g:Lf_StlColorscheme = 'powerline'
"let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
" 
"let g:Lf_NormalMap = {
"    \ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>']],
"    \ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>']],
"    \ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
"    \ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
"    \ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>']],
"    \ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
"    \ }
" preview 
noremap <Leader>pt :PreviewTag<cr>
noremap <Leader>pk :PreviewScroll -1<cr>
noremap <Leader>pc :PreviewClose<cr>
noremap <Leader>pj :PreviewScroll +1<cr>

set shortmess=atI
set noswapfile
set cursorcolumn     " 突出显示当前列
hi CursorColumn cterm=None ctermbg=DarkGrey guibg=grey
set cursorline       " 突出显示当前行
hi Search cterm=None ctermbg=LightBlue guibg=LightYellow
set autoread         " 文件修改之后自动载入
set nobackup         " 不备份文件
set hlsearch         " 高亮搜索
set incsearch        " 实时搜索
set ignorecase smartcase
set ruler            " 右下角显示光标的位置


set whichwrap+=<,>,h,l "   退格和方向键可以换行
set showcmd

" 自动切换到目标文件所在的目录
if exists('+autochdir')
    set autochdir
else
    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif

" 状态栏配置
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
set laststatus=2   "总是显示状态栏

set showmatch      " 跳转并高亮一下匹配的括号

" ==========================================================
" 代码相关
" ==========================================================
" set nofoldenable   " 启动vim时打开/关闭折叠代码
set foldenable
set foldmethod=indent
set foldlevel=99

" 防止tmux下vim的背景色显示异常
" Refer: http://sunaku.github.io/vim-256color-bce.html
if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

"search "

