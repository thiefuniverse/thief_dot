"=============================================================================
"     FileName: .vimrc
"   Descprtion: vim配置文件
"       Author: Benson Yan
"        Email: fuxin04@gmail.com
"      Version: 1.0.0
"   LastChange: 2015-04-18 09:20:59
"=============================================================================


"==========================================
" Initial Plugin 加载插件
"==========================================
syntax enable
syntax on

" Set mapleader
let mapleader = ","
let g:mapleader = ','

" install bundles
if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
endif
"==========================================
" General Settings 基础设置
"==========================================
let &titlestring=$USER."@".hostname().": %t%M(%F)"
set title
set titleold=""
" sudo权限保存文件
cmap w!! w !sudo tee > /dev/null %
" cmap w!! w !sudo sh -c "cat > %"

set history=500						" history文件中需要记录的行数
set shortmess=atI					"启动时不显示 捐赠提示
filetype on 						" 检测文件类型
filetype plugin on 					" 允许插件
filetype plugin indent on			" 文件类型插件
set autoread 						" 文件修改之后自动载入
set nobackup						" 不备份文件
set noswapfile						" 关闭交换文件
set cursorcolumn 					" 突出显示当前列
set cursorline						" 突出显示当前行

"current line thief"

" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
set t_ti= t_te=

set mouse-=a 						" 鼠标暂不启用
" set mouse=a 						" 启用鼠标
" set mousehide 					" 打字时隐藏光标
" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
set selection=inclusive
set selectmode=mouse,key
set title							" change the terminal's title

" 去掉输入错误的提示声音
set novisualbell
set noerrorbells
set t_vb=
set tm=500

set viminfo^=% 						" Remember info about open buffers on close
set magic							" For regular expressions turn magic on
set whichwrap+=<,>,h,l " 			" 退格键和方向键可以换行
"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================
set ruler							" 在编辑过程中，在右下角显示光标位置的状态行
set showcmd							" 在状态栏显示正在输入的命令
set showmode						" 左下角显示当前vim模式
set scrolloff=7						" 上下可视行数
" 命令行（在状态行下）的高度，默认为1，这里是2
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line - use 2 lines for the status bar
set laststatus=2					" 显示状态栏 (默认值为 1, 无法显示状态栏)

set number							" 显示行号
set nowrap							" 取消换行
set showmatch						" 括号配对情况, 跳转并高亮一下匹配的括号
set matchtime=2						" How many tenths of a second to blink when matching brackets
set hlsearch						" 搜索时高亮显示被找到的文本
set incsearch						" 实时搜索
set ignorecase smartcase			" 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感

" set nofoldenable 					" 启动vim时打开/关闭折叠代码
set foldenable
set foldlevel=99

" set foldmethod=indent 			" 基于缩进或语法进行代码折叠
set foldmethod=syntax

" 代码折叠自定义快捷键 <leader>zz
let g:FoldMethod = 0
map <leader>zz :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun

set number							" 显示行号
set autoindent						" vim使用自动对齐，也就是把当前行的对起格式应用到下一行
set smartindent						" 依据上面的对齐格式，智能的选择对起方式，对于类似C语言编码
set cindent							" 使用C样式的缩进

set tabstop=4						" 设置tab键为4个空格
set shiftwidth=4					" 设置当行之间交错时使用4个空格
set softtabstop=4					" 设置按BackSpace的时候可以一次删除掉4个空格
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
set expandtab						" 将制表符扩展为空格
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround
set backspace=2						" 使回格键（backspace）正常处理indent, eol, start等
set backspace=indent,eol,start		" 不设定在插入状态无法用退格键和 Delete 键删除回车符

set hidden							" 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set wildmode=list:longest
set ttyfast
set nrformats=						" 00x增减数字时使用十进制
" 相对行号: 行号变成相对，可以用 nj/nk 进行跳转
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
" nnoremap <C-t> :call NumberToggle()<cr>

" 防止tmux下vim的背景色显示异常
" Refer: http://sunaku.github.io/vim-256color-bce.html
if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
set encoding=utf-8					" 设置中文编码配置
" 自动判断编码时，依次尝试以下编码：
set fileencodings=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
set termencoding=utf-8				" 只影响普通模式 (非图形界面) 下的 Vim
set fileformats=unix
set ffs=unix,dos,mac 				" Use Unix as the standard file type
set formatoptions+=m 				" 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=B 				" 合并两行中文时，不在中间加空格
" Enable spell checking, which is not on by default for commit messages.
au FileType gitcommit setlocal spell
" " Reset textwidth if you've previously overridden it.
au FileType gitcommit setlocal textwidth=72
"==========================================
" others 其它设置
"==========================================
" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC
set wildmenu						" 命令行补全以增强模式运行
set wildignore=*.swp,*.bak,*.pyc,*.class,.svn

" 离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" 回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

" In the quickfix window, <CR> is used to jump to the error under the
" cursor, so undefine the mapping there.
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
" quickfix window  s/v to open in split window,  ,gd/,jd => quickfix window => open it
autocmd BufReadPost quickfix nnoremap <buffer> v <C-w><Enter><C-w>L
autocmd BufReadPost quickfix nnoremap <buffer> s <C-w><Enter><C-w>K

" command-line window
autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>

" 上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set autochdir						" 自动切换当前目录为当前文件所在的目录
set display=lastline				" 解决自动换行格式下, 如高度在折行之后超过窗口高度结果这一行看不到的问题
set lbr								" 在breakat字符处而不是最后一个字符处断行

set lz								" 当运行宏时，在命令执行完成之前，不重绘屏幕
set completeopt=longest,menu 		" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"==========================================
" HotKey Settings  自定义快捷键设置
"==========================================
" 映射全选+复制 ctrl+a
map <C-A> ggVGY
map! <C-A> <Esc>ggVGY

" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
vmap <Leader>p "+p
imap <Leader>p <esc>"+p

" 定义快捷键关闭当前分割窗口
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nmap <Leader>Q :qa!<CR>
" 依次遍历子窗口
nnoremap nw <C-W><C-W>
" 分屏窗口移动, Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" 定义快捷键在结对符之间跳转
nmap <Leader>M %

" => 选中及操作改键

" 调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

" y$ -> Y Make Y behave like other capitals
map Y y$

"==========================================
" Theme Settings  主题设置
"==========================================
" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=文泉驿等宽微米黑\ 12
    " set guifont=WenQuanYi\ Micro\ Hei\ Mono:style=Regular\ 12
    if has("gui_gtk2")   "GTK2
        set guifont=文泉驿等宽微米黑\ 12
        " set guifont=WenQuanYi\ Micro\ Hei\ Mono:style=Regular\ 12
    endif
    set guioptions-=T
    set guioptions+=e
    set guioptions-=r
    set guioptions-=L
    set guitablabel=%M\ %t
    set showtabline=1
    set linespace=2
    set noimd
    set t_Co=256
else
    set t_Co=256
    set guifont=Monaco:h14
endif

" theme主题
set background=dark
" colorscheme solarized
colorscheme molokai
" colorscheme desert

" 设置背景透明，V模式下高亮颜色
hi! Visual term=reverse cterm=reverse ctermfg=10 ctermbg=8 guibg=DarkGrey
hi! Normal ctermbg=none


" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

"==========================================
" misc 杂项设置
"==========================================
"设置tags
" set tags+=.tags
set tags=./.tags;,.tags
"set autochdir

" 代码对齐tabular
nmap <leader>bb :Tab /=<CR>	" ,bb按=号对齐代码 [Tabular插件]
nmap <leader>bn :Tab /		" ,bn自定义对齐    [Tabular插件]

" 更新ctags和cscope索引
" if(executable('ctags'))
"     " silent! execute \"!ctags -R --c-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iatSl --extra=+q -f .tags . \"
"     silent! execute "!ctags -R --c-kinds=+p --fields=+iatSl --extra=+q -f .tags . "
" endif
"
" if(executable('cscope') && has("cscope") )
"     silent! execute "!csout"
"     execute "normal :"
"     if filereadable(".cscope.out")
"         execute "cs add .cscope.out"
"     endif
" endif

" cscope 绑定
if has("cscope")
    set csto=1
    set cst
    set nocsverb
    if filereadable(".cscope.out")
        cs add .cscope.out
    endif
    set csverb
    " s: C语言符号  g: 定义     d: 这个函数调用的函数 c: 调用这个函数的函数
    " t: 文本       e: egrep模式    f: 文件     i: include本文件的文件
    nmap <leader>ss :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sg :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sc :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>st :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>se :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <leader>si :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <leader>sd :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
" 删除后面的:copen<CR>  (修正无法跳转的问题)

set pastetoggle=<F2> "when in insert mode, press <F2> to go to
" disbale paste mode when leaving insert mode
au InsertLeave * set nopaste
" F3 显示可打印字符开关
nnoremap <F3> :set list! list?<CR>
" F4 换行开关
nnoremap <F4> :set wrap! wrap?<CR>

"pythoncomplete配置
autocmd filetype python set omnifunc=pythoncomplete#Complete

" indexer 调用 ctags 的参数
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
" let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" 快捷键
map <SPACE> <Plug>(wildfire-fuel)
vmap <S-SPACE> <Plug>(wildfire-water)
"
" 适用于哪些结对符
let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}", "i>", "ip"]

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/sh")
    endif

    "如果文件类型为python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python3")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc

" 设置可以高亮的关键字
if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
  endif
endif

" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
set t_ti= t_te=

"调用AStyle程序，进行代码美化
map <F7> :call AstyleFormat()<cr>
function! AstyleFormat()
    "取得当前光标所在行号
    let lineNum = line(".")
    "C源程序
    if &filetype == 'c'
        "执行调用外部程序的命令
		silent! execute  "!astyle -n --style=google %"
    "H头文件(文件类型识别为cpp)，CPP源程序
    elseif &filetype == 'cpp'
        "执行调用外部程序的命令
        exec "%! astyle  --style=google<CR>"
    else
        "提示信息
        echo "不支持".&filetype."文件类型。"
    endif
    "返回先前光标所在行
    exec lineNum
endfunc
