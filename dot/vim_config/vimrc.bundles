" ==========================================


" bundle 插件管理和配置项
" ==========================================
" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta', 'json', 'nginx', 'golang', 'ruby', 'less', 'php', 'coffeescript', 'docker']
    let g:bundle_groups=['json', 'golang', 'python']
endif

if empty(glob('$HOME/.vim/autoload/plug.vim'))
  silent !git clone https://github.com/junegunn/vim-plug.git $HOME/.vim/bundle/vim-plug &&
    \ install -o `whoami` -g `whoami` -d $HOME/.vim/autoload &&
    \ install -o `whoami` -g `whoami` -d $HOME/.vim/autoload &&
    \ ln -sf ../bundle/vim-plug/plug.vim $HOME/.vim/autoload/
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')
" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处
" Make sure you use single quotes
" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" Plugin 'AuthorInfo'
Plug 'junegunn/vim-plug'
Plug 'w0rp/ale'
Plug 'SirVer/ultisnips'| Plug 'honza/vim-snippets'          "宏定义补全
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'         " 快速加入修改环绕字符
Plug 'junegunn/vim-easy-align'                              " 快速赋值语句对齐
Plug 'Lokaltog/vim-easymotion'                              " 更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'unblevable/quick-scope'                               " 更高效的行内移动, f/F/t/T, 才触发
Plug 'terryma/vim-expand-region'                            " 选中区块
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !python3 ./install.py --clang-completer --gocode-completer
  endif
endfunction
Plug 'Valloric/YouCompleteMe',{ 'do': function('BuildYCM') }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}

Plug 'Valloric/ListToggle'
Plug 'scrooloose/nerdtree',{ 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'majutsushi/tagbar'                                    "标签导航
Plug 'kien/rainbow_parentheses.vim'                         "括号匹配高亮
Plug 'nathanaelkane/vim-indent-guides'                      "可视化缩进
Plug 'ntpeters/vim-better-whitespace'                       "标志无效空格
Plug 'vim-scripts/matchit.zip'                              "括号匹配跳转,快捷键为%

Plug 'godlygeek/tabular'                                    "代码对齐
Plug 'hdima/python-syntax'                                  "python语法高亮
    let python_highlight_all = 1
Plug 'yianwillis/vimcdoc'                                   "Vim 中文文档计划
Plug 'Chiel92/vim-autoformat'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'dyng/ctrlsf.vim'
Plug 'vim-airline/vim-airline'		                        " 状态栏增强展示
Plug 'vim-airline/vim-airline-themes'
Plug 'Raimondi/delimitMate'			                        " 自动补全单引号，双引号等
Plug 'skywind3000/gutentags_plus'                           " gtags 数据库自动切换

if count(g:bundle_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vimgo
    Plug 'fatih/vim-go', {'for': 'go'}
endif

if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax'
    Plug 'hynek/vim-python-pep8-indent'
    Plug 'Glench/Vim-Jinja2-Syntax'
endif

" Add maktaba and codefmt to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
" Also add Glaive, which is used to configure codefmt's maktaba flags. See
" `:help :Glaive` for usage.
Plug 'google/vim-glaive'
Plug 'rhysd/vim-clang-format'
Plug 'ludovicchabant/vim-gutentags'
Plug 'Yggdroot/LeaderF' " 文件切换
" Plug 'Plug 'skywind3000/asyncrun.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'Shougo/echodoc' " 参数提示
if count(g:bundle_groups, 'docker')
    Plug 'ekalinin/Dockerfile.vim'  "Vim syntax file for Docker's Dockerfile
    Plug 'isobit/vim-caddyfile'

    Plug 'google/vim-maktaba'  "plugin for invoking bazel and interacting with bazel artifacts.
    Plug 'bazelbuild/vim-bazel'
endif

if count(g:bundle_groups, 'nginx')
    Plug 'chr4/nginx.vim'  "nginx syntax
endif

Plug 'pboettch/vim-cmake-syntax'

set noshowmode
" Add plugins to &runtimepath
call plug#end()

" ===============================================
" 插件设置
" ===============================================
" 插件窗口的宽度，如Tagbar,NERD_tree等，自己设置
let s:PlugWinSize = 30

" ################### 自动补全 ###################

" YouCompleteMe {{{
	" YCM 补全菜单配色
	" 菜单
	highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
	" 选中项
	highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900

	let g:ycm_confirm_extra_conf=0 		" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
    let g:ycm_complete_in_comments = 1  " 在注释输入中也能补全
    let g:ycm_complete_in_strings = 1   " 在字符串输入中也能补全
    let g:ycm_use_ultisnips_completer = 1 					"提示UltiSnips
    let g:ycm_server_python_interpreter = '/usr/bin/python3' "设置Python解释器的路径
    " let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_tags_files = 1				" 开启语法关键字补全
    let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开

    let g:ycm_collect_identifiers_from_tags_files=1       " 开启 YCM 标签引擎
    " set tags+=$HOME/.indexer_files_tags/kernel_headers.tags  " 引入 linux 标准库tags

    " 跳转到定义处, 分屏打开
    " let g:ycm_goto_buffer_command = 'horizontal-split'
    " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>yd :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <leader>yg :YcmCompleter GoToDeclaration<CR>
    nnoremap <leader>yt :YcmCompleter GetType<CR>
	nnoremap <F9> :YcmCompleter GoTo<CR>

    " 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
    " if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf = "$HOME/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py"
        " let g:ycm_global_ycm_extra_conf = '$HOME/.vim/ycm_conf/.ycm_extra_conf.py'
    " endif

	set completeopt-=preview						" 补全内容不以分割子窗口形式出现，只显示补全列表
	let g:ycm_min_num_of_chars_for_completion=1		" 从第一个键入字符就开始罗列匹配项
	" let g:ycm_cache_omnifunc=0					" 禁止缓存匹配项，每次都重新生成匹配项
    let g:ycm_key_invoke_completion = '<M-;>'	" 直接触发自动补全 insert模式下

    " 黑名单,不启用
    let g:ycm_filetype_blacklist = {
        \ 'tagbar' : 1,
        \ 'gitcommit' : 1,
        \}

    "youcompleteme  默认tab  s-tab 和自动补全冲突
    "let g:ycm_key_list_select_completion=['<c-n>']
    let g:ycm_key_list_select_completion = ['<Down>']
    "let g:ycm_key_list_previous_completion=['<c-p>']
    let g:ycm_key_list_previous_completion = ['<Up>']

    let g:ycm_error_symbol = '>>'
	let g:ycm_warning_symbol = '>*'
" }}}
"
" 自动索引,自动增量更新
" vim-gutentags {{{
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
" }}}
" ################### 显示增强 ###################

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
" }}}

" delimitMate {{{
    " for python docstring ",优化输入
    au FileType python let b:delimitMate_nesting_quotes = ['"']
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
    " 关闭某些类型文件的自动补全
    "au FileType mail let b:delimitMate_autoclose = 0
" }}}

" ################### 显示增强-主题 ###################"

" solarized {{{
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    " let g:solarized_termcolors=256
" }}}

" molokai {{{
    " monokai原始背景色
    let g:molokai_original = 1
    let g:rehash256 = 1
" }}}

" ################### ######### ###################"
"Tagbar标签导航，纬度和taglist不同
" tagbar {{{
	nnoremap <silent> <F6> :TagbarToggle<CR>  " \tb 打开tagbar窗口
	let g:tagbar_autofocus = 1
	" tagbar 子窗口中不显示冗余帮助信息
	let g:tagbar_compact=1
	" 设置 ctags 对哪些代码标识符生成标签
	let g:tagbar_type_cpp = {
    	\ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0',
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 't' : 'ctype',
         \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u',
         \ 'ctype'	   : 't',
         \ 'ntype'	   : 'n'
    \ }
\ }
" }}}

" 括号匹配高亮rainbow_parentheses.vim
" rainbow_parentheses {{{
    " 不加入这行, 防止黑色括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
	let g:rbpt_colorpairs = [
	    \ ['brown',       'RoyalBlue3'],
	    \ ['Darkblue',    'SeaGreen3'],
	    \ ['darkgray',    'DarkOrchid3'],
	    \ ['darkgreen',   'firebrick3'],
	    \ ['darkcyan',    'RoyalBlue3'],
	    \ ['darkred',     'SeaGreen3'],
	    \ ['darkmagenta', 'DarkOrchid3'],
	    \ ['brown',       'firebrick3'],
	    \ ['gray',        'RoyalBlue3'],
	    \ ['black',       'SeaGreen3'],
	    \ ['darkmagenta', 'DarkOrchid3'],
	    \ ['Darkblue',    'firebrick3'],
	    \ ['darkgreen',   'RoyalBlue3'],
	    \ ['darkcyan',    'SeaGreen3'],
	    \ ['darkred',     'DarkOrchid3'],
	    \ ['red',         'firebrick3'],
	    \ ]
	let g:rbpt_max = 40
	let g:rbpt_loadcmd_toggle = 0
	au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}

" NERDtree
" nerdtree nerdtreetabs {{{
    let NERDTreeShowHidden = 1
    let NERDTreeWinPos = "left"
    let NERDTreeWinSize = s:PlugWinSize
    nmap <leader>t :NERDTreeToggle<cr>
    " NERDTree 子窗口中不显示冗余帮助信息
    let NERDTreeMinimalUI=1
    " 删除文件时自动删除文件对应 buffer
    let NERDTreeAutoDeleteBuffer=1
" }}}

" 可视化缩进vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 0  " 默认关闭
let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
let g:indent_guides_start_level 	  = 2  " 从第二层开始可视化显示缩进
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black
" ,ig 打开/关闭 vim-indent-guides


" ################### 快速编码 ###################

" NERD_commenter
" Toggle单行注释/“性感”注释/注释到行尾/取消注释
" nerdcommenter {{{
    let g:NERDSpaceDelims=1
    let NERDShutUp=1
    " Use compact syntax for prettified multi-line comments
	let g:NERDCompactSexyComs = 1
	" Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'
    " Add your own custom formats or override the defaults
	let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1
    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1
" }}}

" 去除空格
" trailingwhitespace {{{
" autocmd FileType <desired_filetypes> autocmd BufWritePre <buffer> StripWhitespace
    autocmd BufWritePre * StripWhitespace
    map <leader><space> :FixWhitespace<cr>
" }}}


" easyalign {{{
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }}}

" ################### 快速移动 ###################
" easymotion {{{
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}

" ################### 功能相关 ###################
" 【插件】Ag 配置
" ctrfsf {{{
	let g:ackprg = 'ag --nogroup --column --ignore ".tags" --ignore ".cscope.out" --ignore ".cscope.files"'
	let g:ctrlsf_default_root = 'project'   "cwd means current working directory and project means project root
    let g:ctrlsf_search_mode = 'async'
    " 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
    nnoremap <Leader>sp :CtrlSF<CR>

	nmap     <C-F>f <Plug>CtrlSFPrompt<CR>
	vmap     <C-F>f <Plug>CtrlSFVwordPath<CR>
	vmap     <C-F>F <Plug>CtrlSFVwordExec<CR>
	nmap     <C-F>n <Plug>CtrlSFCwordPath<CR>
	nmap     <C-F>p <Plug>CtrlSFPwordPath<CR>
	nnoremap <C-F>o :CtrlSFOpen<CR>
	nnoremap <C-F>t :CtrlSFToggle<CR>
	inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
	nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt<CR>
	vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath<CR>
	vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec<CR>
" }}}


" 宏定义补全，快速插入代码片段ultisnips
" ultisnips {{{
    " UltiSnips 的 tab 键与 YCM 冲突，重新设定
    let g:UltiSnipsExpandTrigger="<leader><tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"
    let g:UltiSnipsEditSplit="vertical"
    "定义存放代码片段的文件夹 .vim/snippets下
     let g:UltiSnipsSnippetDirectories=["mysnippets"]
" }}}
"
" 动态检查 实时 linting 工具 ALE
" ale {{{
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
" 错训和警告风格
let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta
" }}}

" 文件切换
" LeaderF  {{{
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <c-n> :LeaderfMru<cr>
noremap <m-p> :LeaderfFunction<cr>
noremap <m-n> :LeaderfBuffer<cr>
noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'

let g:Lf_NormalMap = {
   \ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>'],
   \            ["<F6>", ':exec g:Lf_py "fileExplManager.quit()"<CR>'] ],
   \ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>'],
   \            ["<F6>", ':exec g:Lf_py "bufExplManager.quit()"<CR>'] ],
   \ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
   \ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
   \ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>']],
   \ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
   \ }
" }}}

" ################### google format ###################
" vim-codefmt {{{
" the glaive#Install() should go after the "call vundle#end()"
    call glaive#Install()
    " Optional: Enable codefmt's default mappings on the <Leader>= prefix.
    Glaive codefmt plugin[mappings]
    Glaive codefmt google_java_executable="java -jar $HOME/.vim/google-java-format-1.7-all-deps.jar"

    augroup autoformat_settings
    autocmd FileType bzl AutoFormatBuffer buildifier
    " autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
    autocmd FileType dart AutoFormatBuffer dartfmt
    autocmd FileType go AutoFormatBuffer gofmt
    autocmd FileType gn AutoFormatBuffer gn
    " autocmd FileType html,css,json AutoFormatBuffer js-beautify
    autocmd FileType java AutoFormatBuffer google-java-format
    autocmd FileType python AutoFormatBuffer yapf
    " Alternative: autocmd FileType python AutoFormatBuffer autopep8
    augroup END
" }}}

" vim-clang-format {{{
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}
let g:clang_format#code_style = 'llvm'
let g:clang_format#auto_format = 1
" }}}

" ################## 编译运行 ########################
" asyncrun.vim {{{
" 自动打开 quickfix window ，高度为 6
" let g:asyncrun_open = 6
"
" " 任务结束时候响铃提醒
" let g:asyncrun_bell = 1
"
" " 设置 F10 打开/关闭 Quickfix 窗口
" nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>
" 编译运行
" nnoremap <silent> <F9> :AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" nnoremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" 编译项目
" let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs', 'build.xml']
" nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>
" nnoremap <silent> <F8> :AsyncRun -cwd=<root> -raw make run <cr>
" }}}
